{"version":3,"sources":["Layout/Header.js","Layout/NotFound.js","utils/api/index.js","Layout/Home/Deck.js","Layout/Home/DeckList.js","Layout/CreateDeck/CreateDeckForm.js","Layout/CreateDeck/CreateDeck.js","Layout/DeckView/Deck.js","Layout/DeckView/Card.js","Layout/DeckView/CardList.js","Layout/DeckView/ViewDeck.js","Layout/StudyDeck/StudyBreadcrumb.js","Layout/StudyDeck/StudyCardView.js","Layout/StudyDeck/StudyDeck.js","Layout/EditDeck/EditDeckForm.js","Layout/EditDeck/EditDeck.js","Layout/AddCards/AddCardForm.js","Layout/AddCards/AddCards.js","Layout/EditCard/EditCardForm.js","Layout/EditCard/EditCard.js","Layout/index.js","App.js","index.js"],"names":["Header","className","NotFound","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","listDecks","signal","createDeck","method","body","JSON","stringify","readDeck","deckId","updateDeck","updatedDeck","id","deleteDeck","createCard","card","Number","readCard","cardId","updateCard","updatedCard","append","Deck","description","history","useHistory","length","to","onClick","window","confirm","go","DeckList","useState","decks","setDecks","useEffect","abortController","AbortController","log","loadDecks","abort","list","map","CreateDeckForm","deckForm","setDeckForm","handleChange","target","value","onSubmit","event","newDeck","push","preventDefault","makeDeck","htmlFor","type","placeholder","onChange","required","rows","CreateNewDeck","class","href","useParams","useRouteMatch","Card","front","back","deleteCard","CardList","Object","keys","ViewDeck","setDeck","currentDeck","StudyBreadcrumb","StudyCardView","initialState","onBack","currentCard","session","setSession","StudyDeck","loadDeck","EditDeckForm","handleSubmit","EditDeck","deckFromAPI","AddCardForm","initialCardState","cardForm","setCardForm","newCard","AddCards","EditCardForm","EditCard","setCard","thisDeck","thisCard","Layout","exact","path","CreateDeck","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.40947edc.chunk.js","sourcesContent":["import React from \"react\";\n\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import {Link, useHistory} from \"react-router-dom\";\nimport {deleteDeck} from \"../../utils/api/index\";\n\n\nfunction Deck({deck, deckId}){\n  \n    const {name, description} =deck\n    const history=useHistory();\n\n    //called when Delete button is clicked\n    const deleteDeckHandler = () => {\n        if(window.confirm(\"Delete this deck? You will not be able to recover it.\")){\n        deleteDeck(deckId);\n        history.go(0); \n        }\n    }\n\n    //returns single deck view\n    return (\n      <div className =\"card w-100\">  \n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{name} <span className=\"badge font-weight-lighter mx-5\">{deck.cards.length} cards</span></h5>\n            <p className=\"card-text\">{description}</p>\n            <Link to={`/decks/${deckId}`} className=\"btn btn-secondary m-2\">View</Link>\n            <Link to={`/decks/${deckId}/study`} className=\"btn btn-primary m-2\">Study</Link>\n            <button className=\"btn btn-danger mx-5\" onClick={deleteDeckHandler}>\n                Delete\n            </button>\n          </div> \n        </div>\n    )\n};\n\nexport default Deck;","import React, {useState, useEffect} from \"react\";\nimport { Link } from \"react-router-dom\";\nimport NotFound from \"../NotFound\";\nimport Deck from \"./Deck\";\nimport {listDecks} from \"../../utils/api/index\";\n\n//displays all decks \nfunction DeckList(){\n\nconst [decks, setDecks] = useState([]);\n  \n  //retrieves all available decks \n  useEffect(() => {\n    const abortController = new AbortController();\n    async function loadDecks() {\n        try {\n            const response = await listDecks(abortController.signal);\n            setDecks(response);\n        } catch (error) {\n            console.log(error)\n            }\n        }\n    loadDecks();\n    return () => abortController.abort();\n}, []);\n\n  //if there are no available decks, Not Found page displayed, otherwise list of decks created\n   if (decks.length===0){\n     return <NotFound/>\n   } else {\n    const list = \n    decks.map((deck) => (\n    <li key={deck.id}>\n        <Deck key={deck.id} \n            deck={deck}\n            deckId={deck.id}\n           />\n     </li>\n    ));\n \n    return (\n        <div className=\"container\">\n           <Link to=\"/decks/new\">\n            <button className=\"btn btn-secondary my-2\"> \n              + Create Deck\n            </button>\n           </Link>\n        <section className=\"row\">\n          <ul className=\"list-unstyled\">{list}</ul>\n        </section>\n        </div>\n    )\n   }\n};\n    \n\nexport default DeckList;","import React, { useState } from \"react\";\nimport { createDeck } from \"../../utils/api/index.js\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nfunction CreateDeckForm() {\n\n    const history = useHistory();\n    const initialDeckFormState = {\n        id: null,\n        name: \"\",\n        description: \"\",\n    };\n\n    const [deckForm, setDeckForm] = useState({...initialDeckFormState});\n\n    //called when changes made to form\n    const handleChange = ({ target }) => {\n        setDeckForm({\n            ...deckForm,\n            [target.name]: target.value,\n        });\n    };\n\n    //called when Submit button clicked\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        async function makeDeck() {\n            try {\n                const newDeck = await createDeck(deckForm);\n                history.push(`/decks/${newDeck.id}`);\n            } catch (error) {\n                console.log(error);\n            }\n        }\n        makeDeck();\n    };\n\n    //Create Deck form contents\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className=\"mb-3\">\n                <label htmlFor=\"name\" className=\"form-label\">Name</label>\n                <input \n                    type=\"text\" \n                    className=\"form-control\"\n                    name=\"name\" \n                    id=\"name\" \n                    placeholder=\"Deck Name\" \n                    onChange={handleChange}\n                    required=\"required\"\n                    value={deckForm.name}\n                />\n            </div>\n            <div className=\"mb-3\">\n                <label htmlFor=\"description\" className=\"form-label\">Description</label>\n                <textarea \n                    className=\"form-control\" \n                    name=\"description\"\n                    id=\"description\" \n                    placeholder=\"Brief description of the deck\" \n                    onChange={handleChange}\n                    rows=\"4\" \n                    required=\"required\"\n                    value={deckForm.description}\n                ></textarea>\n            </div>\n            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n            <Link to=\"/\">\n                <button type=\"button\" className=\"btn btn-secondary mx-4\">Cancel</button>\n            </Link>    \n\n        </form>\n    );\n}\n\nexport default CreateDeckForm;","import CreateDeckForm from \"./CreateDeckForm\";\nimport React from \"react\";\n\nfunction CreateNewDeck(){\n\n  return (\n    //breadcrumb navigation at top of page\n    <div>\n      <div>\n        <nav aria-label=\"breadcrumb\">\n          <ol class=\"breadcrumb\">\n            <li class=\"breadcrumb-item\"><a href=\"/\">Home</a></li>\n            <li class=\"breadcrumb-item active\" aria-current=\"page\">Create Deck</li>\n          </ol>\n        </nav>\n      </div>\n      {/* Component for form to create new deck */}\n      <CreateDeckForm/>\n    </div>\n  );\n}\n\nexport default CreateNewDeck;","import React from \"react\";\nimport {useRouteMatch, useParams, useHistory, Link} from \"react-router-dom\";\nimport {deleteDeck} from \"../../utils/api/index\";\n\n//deck information and associated buttons at top of page in ViewDeck route\nfunction Deck({deck}){\n\n    const {deckId} =useParams();\n    const {url} = useRouteMatch();\n    const history=useHistory();\n\n    //called when Delete button for the deck is clicked\n    const deleteDeckHandler = () => {\n        if(window.confirm(\"Delete this deck? You will not be able to undo this action\")){\n        deleteDeck(deckId);\n        history.go(\"/\"); \n        }\n}\n    return (\n        <div class=\"card border-0\">\n            <div class=\"card-body\">\n                <h5 class=\"card-title\">{deck.name}</h5> \n                    <p class=\"card-text\">{deck.description}</p>\n                   \n                   {/* Link to Edit Deck page */}\n                    <Link to={`${url}/edit`}>\n                        <button className=\"btn btn-secondary\">\n                            Edit\n                        </button>\n                    </Link>\n\n                    {/* Link to study deck page */}\n                    <Link to={`${url}/study`}>\n                        <button className=\"btn btn-primary mx-2\">\n                            Study\n                        </button>\n                    </Link>\n\n                    {/* Link to Add cards page */}\n                    <Link to={`${url}/cards/new`}>\n                        <button className=\"btn btn-primary mx-2 mr-5\"> \n                            Add Cards\n                        </button>\n                    </Link>\n\n                    {/* Delete deck button */}\n                    <button className=\"btn btn-danger ml-5\" onClick={deleteDeckHandler}>\n                        Delete\n                    </button>\n            </div>\n        </div>\n    )\n}\n\nexport default Deck;","import React from \"react\";\nimport {Link, useRouteMatch, useHistory} from \"react-router-dom\";\nimport {deleteCard} from \"../../utils/api/index\";\n\n\nfunction Card({card}){\n const {url} = useRouteMatch();\n const cardId = card.id;\n const history = useHistory();\n\n  //handles clicking the delete button on each card\n  const deleteCardHandler = () => {\n  if (window.confirm(\"Delete this card? You will not be able to recover it\")) {\n  deleteCard(cardId);\n  history.go(0); \n  }\n}\n\n  //makes up each individual card\n    return (\n      <div class =\"card\">  \n        <div class=\"card-body\">\n          <div class=\"container\">\n            < div class=\"row d-flex justify-content-between\">\n          {/*displays card front text*/}\n            <div class=\"col-6\">\n              <p>{card.front}</p>\n            </div>\n            {/*displays card back text*/}\n              <div class=\"col-6\">\n                <p>{card.back}</p>\n              </div>\n             </div>\n              {/*takes user to Edit Card screen*/}\n            <div className=\"d-flex justify-content-end\">\n              <Link to={`${url}/cards/${cardId}/edit`}>\n                <button className=\"btn btn-secondary px-4\">\n                  Edit\n                </button>\n              </Link>\n              <button className=\"btn btn-danger mx-2\" onClick={deleteCardHandler}>\n              Delete\n              </button>\n            </div>\n          </div>\n        </div> \n      </div>\n    )\n}\n\nexport default Card;","import React from \"react\";\nimport Card from \"./Card\";\n\nfunction CardList({deck}){\n  \n  //list of cards in a specified deck\n  const list = Object.keys(deck).length ?\n      deck.cards.map((card) => (\n      <li key={card.id}>\n          <Card key={card.id}\n              card={card}\n             />\n       </li>\n      )) : null;\n     \n      return (\n        <div className=\"container\">\n          <h3>Cards</h3>\n            <section className=\"row\">\n              <ul className=\"list-unstyled\">{list}</ul>\n            </section>\n        </div>\n      )\n};\n\nexport default CardList;","import React, {useEffect, useState} from \"react\";\nimport {readDeck} from \"../../utils/api/index\";\nimport { NavLink, useParams} from \"react-router-dom\";\n\nimport Deck from \"./Deck\";\nimport CardList from \"./CardList\";\n\nfunction ViewDeck() {\n    \n    const initialDeckState= {\n        id:0,\n        name: \"\", \n        description: \"\",\n        cards: [],\n    }\n\n    const [deck, setDeck] = useState(initialDeckState);\n    const {deckId} = useParams();\n\n    //gets current deck information\n    useEffect(() => {\n        setDeck({});\n        const abortController = new AbortController();\n        async function currentDeck(){\n            try{\n                const response= await readDeck(deckId, abortController.signal);\n                setDeck(response); \n            } catch (error) {\n                console.log(error)\n            }\n        }\n        currentDeck();\n        return ()=> abortController.abort();\n    },[deckId]);\n\n\n    return (\n        <div>\n            {/* breadcrumb navigation */}\n            <nav aria-label=\"breadcrumb\">\n                <ol class=\"breadcrumb\">\n                    <li class=\"breadcrumb-item\">\n                    <NavLink to=\"/\" href=\"/\">\n                        Home\n                    </NavLink>\n                    </li>\n                    <li class=\"breadcrumb-item active\" aria-current=\"page\">\n                    {deck.name}\n                    </li>\n                </ol>\n            </nav>\n\n            {/* component for deck information */}\n            <Deck deck={deck}/>\n\n            {/* component for list of cards in the specified deck */}\n            <CardList deck={deck}/>\n        </div>\n    )\n};\n\nexport default ViewDeck;","import {NavLink, useParams} from \"react-router-dom\";\n\n//breadcrumb navigation at top of Study deck page\nfunction StudyBreadcrumb({deck}){\n\n    const {deckId} = useParams();\n\n    return (\n    <>\n        <nav aria-label=\"breadcrumb\">\n            <ol class=\"breadcrumb\">\n                <li class=\"breadcrumb-item\">\n                 <NavLink to=\"/\" href=\"/\">\n                  Home\n                </NavLink>\n                </li>\n\n                <li class=\"breadcrumb-item\">\n                <NavLink to={`/decks/${deckId}`}>\n                  {deck.name}\n                </NavLink>\n                </li>\n\n                <li class=\"breadcrumb-item active\" aria-current=\"page\">\n                  Study\n                </li>\n            </ol>\n        </nav>\n    </>\n    )\n};\n\nexport default StudyBreadcrumb;","import React, { useState } from \"react\";\nimport { useHistory, Link, useParams } from \"react-router-dom\";\n\n\nfunction StudyCardView({cards}) {\n\n    const initialState = {\n        onBack: false,\n        currentCard: 0,\n    };\n\n    const { deckId } = useParams();\n    const history = useHistory();\n    const [session, setSession] = useState({...initialState});\n   \n    \n    const handleNext = () => {\n        if (session.currentCard < cards.length - 1) {\n            setSession({\n                ...session,\n                currentCard: session.currentCard + 1,\n                onBack: false,\n            })\n        } \n        else {\n            if(window.confirm(\"Restart cards? Click 'cancel' to return to the home page.\")) {\n                setSession(initialState);\n            } else {\n                history.push(\"/\");\n            }\n        \n    }\n}\n\n    const handleFlip = () => {\n        if (session.onBack) {\n            setSession({\n                ...session,\n                onBack: false\n            }) \n        } else {\n            setSession({\n                ...session,\n                onBack: true\n            })\n        }\n    }\n    \n   \n    if (cards.length > 2) {\n        return (\n           <div className=\"container\">\n            <div className=\"card w-100\">\n                <div className=\"card-body\">\n                    <h4 className=\"card-title\">\n                        Card {session.currentCard + 1} of {cards.length}\n                    </h4>\n                    <p className=\"card-text\">\n                        {session.onBack \n                        ? cards[session.currentCard].back\n                        : cards[session.currentCard].front\n                        }                      \n                    </p>\n                    <button className=\"btn btn-secondary mr-1\" onClick={handleFlip}>Flip</button>\n                    {session.onBack && (\n                        <button className=\"btn btn-primary\" onClick={handleNext}>Next</button>\n                    )}\n                </div>\n            </div>\n            </div>\n        )\n    } else {\n            return (\n    <>\n    <div className = \"container\">\n    <h3>Not enough cards.</h3>\n    <p>You need at least 3 cards to study. There are {cards.length} cards in this deck.</p>\n    <Link to={`/decks/${deckId}/cards/new`}>\n        <button className=\"btn btn-primary\">+ Add Cards</button>\n    </Link>\n    </div>\n    </>\n\n        )\n    }\n}\n\nexport default StudyCardView;","import React, {useEffect, useState} from \"react\";\nimport {useParams} from \"react-router-dom\";\nimport {readDeck} from \"../../utils/api/index\";\nimport StudyBreadCrumb from \"./StudyBreadcrumb\"\nimport StudyCardView from \"./StudyCardView\";\n\nfunction StudyDeck(){\n    const [deck, setDeck] = useState({});\n    const {deckId} = useParams();\n\n    //loads current deck to be studied\n    useEffect(() => {\n      const abortController = new AbortController();\n      async function loadDeck() {\n        try{\n          const newDeck = await readDeck(deckId);\n          setDeck(newDeck);\n        console.log(newDeck);\n        } catch(error) {\n          if (error.name === \"AbortError\")\n          console.log(error)\n        }\n      }\n      loadDeck();\n      return ()=> abortController.abort();\n    }, [deckId]);\n  \n    //if readDeck returns a deck with cards in it, will return the following\n      if (Object.keys(deck).length) {\n        return (\n        <>\n        <StudyBreadCrumb deck = {deck}/>\n        <div className = \"container\">\n        <div className=\"row\">\n          <h3>Study: {deck.name}</h3>\n        </div>\n        <div className=\"row\">\n        <StudyCardView cards={deck.cards}/> \n        </div>\n        </div>\n        </>\n        )\n      }\n        else return \"Loading deck...\";\n};\n\n  export default StudyDeck;","import {useHistory} from \"react-router-dom\";\nimport React from \"react\";\n\nfunction EditDeckForm({deckId, handleSubmit, handleChange, deck}){\n\n  const history= useHistory();\n\n  //Edit deck form input fields and associated buttons\n  return (\n    <section>\n      <form onSubmit={handleSubmit}>\n        <div class=\"form-group\">\n          <label htmlFor=\"name\" className=\"form-label\" >Name</label>\n          <input \n            id=\"name\"\n            type=\"text\"\n            class=\"form-control\" \n            name=\"name\"\n            onChange={handleChange}\n            value={deck.name} \n            required=\"required\"\n          />\n        </div>\n\n        <div class=\"form-group\">\n          <label htmlFor=\"Description\" className=\"form-label\">Description</label>\n          <textarea \n            class=\"form-control\" \n            id=\"Description\" \n            rows=\"5\"\n            name=\"description\"\n            onChange={handleChange}\n            required=\"required\"\n            value={deck.description}\n          />\n        </div>\n\n        <button class=\"btn btn-secondary mx-2\" type=\"button\" onClick={() => history.push(`/decks/${deckId}`)}>Cancel</button>\n        <button class=\"btn btn-primary\" type=\"submit\" onClick={handleSubmit}>Submit</button>\n      </form>\n    </section>\n  )\n};\n\nexport default EditDeckForm;","import {updateDeck, readDeck} from \"../../utils/api/index\";\nimport React, {useState, useEffect} from \"react\";\nimport {useHistory, useParams} from \"react-router-dom\";\nimport EditDeckForm from \"./EditDeckForm\";\n\nfunction EditDeck(){\n\n    const {deckId} = useParams()\n    const history = useHistory();\n\n    const deckReset={\n        id: \"\",\n        name: \"\",\n        description: \"\",\n    }\n\n    const [deck, setDeck] = useState(deckReset);\n\n    //retrieves current deck to be edited and sets deck state\n    useEffect(() => {\n        const abortController = new AbortController();\n        async function currentDeck(){\n            try{\n                const deckFromAPI= await readDeck(deckId, abortController.signal);\n                setDeck(deckFromAPI); \n            } catch (error) {\n                console.log(error);\n            }\n        }\n        currentDeck();\n    },[deckId]);\n\n\n    //called when any change made to form\n    const handleChange = ({target}) => {\n        setDeck({\n            ...deck,\n            [target.name]: target.value\n        });\n    };\n\n    //called when user clicks Submit button\n    async function handleSubmit(event) {\n          event.preventDefault();\n          await updateDeck({\n              ...deck,\n              id: deck.id,\n              name: deck.name, \n              description: deck.description,\n          });\n              history.push(`/decks/${deckId}`);\n            }\n            \n    return (    \n        <div>\n            <div>\n                {/* Breadcrumb navigation for  */}\n                <nav aria-label=\"breadcrumb\">\n                    <ol class=\"breadcrumb\">\n                        <li class=\"breadcrumb-item\"><a href=\"/\">Home</a></li>\n                        <li class=\"breadcrumb-item\"><a href={`/decks/${deckId}`}>{deck.name}</a></li>\n                        <li class=\"breadcrumb-item active\" aria-current=\"page\">Edit Deck</li>\n                    </ol>\n                </nav>\n            </div>\n\n            <EditDeckForm\n                handleSubmit={handleSubmit}\n                handleChange={handleChange}\n                deck={deck}\n                deckId= {deckId}\n                />\n            </div>\n\n    )\n};\n\n    \nexport default EditDeck;","import {useParams, useHistory} from \"react-router-dom\";\nimport React, {useState} from \"react\";\nimport { createCard } from \"../../utils/api\";\n\nfunction AddCardForm(){\n\nconst {deckId} = useParams();\n\n  const initialCardState = { \n    front: \"\", \n    back: \"\", \n    deckId: 0,\n  }\n\n  const [cardForm, setCardForm] = useState({...initialCardState})\n  const history= useHistory();\n\n  //called when changes made to form\n  const handleChange = ({target}) => {\n    setCardForm({\n        ...cardForm,\n        [target.name]: target.value\n    })\n  }; \n\n  \n  //called when form submitted\n   const handleSave = (event) => {\n    event.preventDefault();\n    setCardForm({\n        ...cardForm,\n        deckId: `${deckId}`\n    })\n    console.log(cardForm)\n    async function newCard(){\n        try{\n            await createCard(deckId, cardForm) ;\n            setCardForm({...initialCardState});\n            history.push(0);\n        } catch (error){\n           console.log(error)\n        }\n       }\n      newCard();\n    };\n\n //returns the text boxes for the form\nreturn (    \n    <section>\n      <form onSubmit={handleSave}>\n        <div className=\"form-group\">\n          <label htmlFor=\"front\" className=\"form-label\">Front:</label>\n          <textarea\n            type=\"text\"\n            class=\"form-control\" \n            id=\"front\"\n            rows=\"5\"\n            name=\"front\"\n            onChange={handleChange}\n            value={cardForm.front} \n            required=\"required\"\n            placeholder=\"Front side of card\"/>\n         </div>\n    \n         <div class=\"form-group\">\n          <label htmlFor=\"back\" className=\"form-label\">Back:</label>\n          <textarea \n            class=\"form-control\" \n            id=\"back\" \n            rows=\"5\"\n            name=\"back\"\n            onChange={handleChange}\n            required=\"required\"\n            value={cardForm.back}\n            placeholder=\"Back side of the card\"/>\n          </div>\n    \n          <button class=\"btn btn-primary\" type=\"submit\">Save</button>\n          <button class=\"btn btn-secondary mx-2\" type=\"button\" onClick={()=> history.push(`/decks/${deckId}`)}>Done</button>\n       </form>\n     </section>\n    )\n   }\n\nexport default AddCardForm;","import { useParams, useHistory, NavLink} from \"react-router-dom\";\nimport React, {useState, useEffect} from \"react\";\nimport { readDeck } from \"../../utils/api\";\nimport AddCardForm from \"./AddCardForm\";\n\nfunction AddCards(){\n    const {deckId} = useParams();\n    const [deck, setDeck] = useState({})\n    const history = useHistory();\n\n    useEffect(() => {\n        setDeck({});\n        const abortController = new AbortController();\n        async function currentDeck(){\n        try{\n            const response= await readDeck(deckId, abortController.signal);\n            setDeck(response); \n        } catch (error) {\n            if (error.name === \"AbortError\") {\n                console.log(\"Unable to load deck\", deckId);\n            } else {\n                history.push(`/${error}`);\n//               console.log(error)\n            }\n        }\n        }\n        currentDeck();\n        return ()=> abortController.abort();\n    },[deckId, history]);\n\n    \n\n return (\n<div>\n<nav aria-label=\"breadcrumb\">\n        <ol class=\"breadcrumb\">\n            <li class=\"breadcrumb-item\">\n                <NavLink to=\"/\">\n                    Home\n                </NavLink>\n            </li>\n            <li class=\"breadcrumb-item\">\n                <NavLink to={`/decks/${deckId}`}>\n                 {deck.name}\n                </NavLink>\n            </li>\n            <li class=\"breadcrumb-item active\" aria-current=\"page\">Add Card</li>\n        </ol>\n    </nav>\n    <AddCardForm deck = {deck}/>\n   \n </div>\n )\n}\n\nexport default AddCards;","import {useHistory, useParams} from \"react-router-dom\";\n\n\nfunction EditCardForm({card, handleSubmit, handleChange}){\n\n    const history= useHistory();\n    const {deckId} = useParams();\n\n    //form input fields and associated buttons\n    return (\n        <section>\n            <form onSubmit={handleSubmit}>\n                <div class=\"form-group\">\n                    <label htmlFor=\"front\" className=\"form-label\">Front</label>\n                    <textarea\n                        class=\"form-control\"\n                        id=\"front\"\n                        rows=\"5\"\n                        name=\"front\"\n                        onChange={handleChange}\n                        required=\"required\"\n                        value={card.front}\n                    />\n                    <label htmlFor=\"back\" className=\"form-label\">Back</label>\n                    <textarea\n                        class=\"form-control\"\n                        id=\"back\"\n                        rows=\"5\"\n                        name=\"back\"\n                        onChange={handleChange}\n                        required=\"required\"\n                        value={card.back}\n                    />\n                    <button class=\"btn btn-secondary m-1\" type=\"button\" onClick={()=> history.push(`/decks/${deckId}`)}>Cancel</button>\n\n                    <button class=\"btn btn-primary m-3\" type=\"submit\">Submit</button>\n                </div>\n            </form>\n        </section>\n   \n    )\n};\n\nexport default EditCardForm;","import {useParams, NavLink, useHistory} from \"react-router-dom\";\nimport React, {useState, useEffect} from \"react\";\nimport { readDeck, readCard, updateCard  } from \"../../utils/api\";\nimport EditCardForm from \"./EditCardForm\";\n\nfunction EditCard(){\n\n    const initialDeckState = {\n        name: \"\", \n        description: \"\",\n    }\n\n    const initialCardState = {\n        front: \"\", \n        back: \"\", \n    }\n    \n    const {cardId, deckId} = useParams();\n    const [card, setCard] = useState({...initialCardState});\n    const [deck, setDeck] = useState({...initialDeckState});\n    const history = useHistory();\n\n    //retrieves current deck\n    useEffect(()=> {\n        const abortController = new AbortController();\n        async function currentDeck(){\n            try{\n                const thisDeck = await readDeck(deckId, abortController.signal);\n                setDeck(thisDeck)\n            } catch (error) {\n                if (error.name === \"AbortError\") {\n                    console.log(\"Unable to load deck\", deckId);\n                }\n            }\n        }\n        currentDeck();\n        return () => abortController.abort();\n    }, [deckId]);\n    \n    //retrieves current card information \n    useEffect(()=> {\n        const abortController = new AbortController();\n        async function currentCard(){\n            try{\n                const thisCard = await readCard(cardId, abortController.signal);\n                setCard(thisCard);\n                console.log(thisCard);\n            } catch (error) {\n                if (error.name === \"AbortError\"){\n                    console.log(\"Unable to load card\", cardId)\n                } \n            } \n        }\n        currentCard();\n        }, [cardId]);\n    \n    //called when changes made to form\n    const handleChange = ({target}) => {\n        setCard({\n            ...card,\n            [target.name]: target.value\n        })\n    }; \n    \n    //called when Submit button clicked\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        async function newCard(){\n            try{\n                await updateCard(card) ;\n                history.push(`/decks/${deckId}`);\n            } catch (error){\n                if(error.name === \"AbortError\") {\n                    console.log(\"updateCard Aborted\");\n                } else {\n                throw error;\n                }\n            }\n        }\n        newCard();\n    };\n\n    return (\n        <>\n        <nav aria-label=\"breadcrumb\">\n            <ol class=\"breadcrumb\">\n                <li class=\"breadcrumb-item\">\n                <NavLink to=\"/\" href=\"/\">\n                    Home\n                </NavLink>\n                </li>\n                \n                <li class=\"breadcrumb-item\">\n                <NavLink to={`/decks/${deckId}`}>\n                    Deck {deck.name}\n                </NavLink>\n                </li>\n                \n                <li class=\"breadcrumb-item active\" aria-current=\"page\">\n                Edit card {cardId}\n                </li>\n            </ol>\n        </nav>\n        <EditCardForm \n            card = {card}\n            handleSubmit={handleSubmit}\n            handleChange={handleChange}\n        />\n        </>\n    )\n};\n\nexport default EditCard;","import React from \"react\";\nimport {Switch, Route} from \"react-router-dom\";\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport DeckList from \"./Home/DeckList\"\nimport CreateDeck from \"./CreateDeck/CreateDeck\";\nimport ViewDeck from \"./DeckView/ViewDeck\";\nimport StudyDeck from \"./StudyDeck/StudyDeck\";\nimport EditDeck from \"./EditDeck/EditDeck\";\nimport AddCards from \"./AddCards/AddCards\";\nimport EditCard from \"./EditCard/EditCard\";\n\n\nfunction Layout() {\n  return (\n    <div>\n      <Header />\n      <div className=\"container\">\n        {/* TODO: Implement the screen starting here */}\n       <Switch>\n        <Route exact path=\"/\">\n          <DeckList/>\n        </Route> \n         \n         <Route path=\"/decks/new\">\n          <CreateDeck/>\n        </Route>\n         \n        <Route path=\"/decks/:deckId/cards/new\"> \n          <AddCards/>\n        </Route> \n         \n         <Route path=\"/decks/:deckId/study\"> \n          <StudyDeck/>\n        </Route>\n         \n         <Route path=\"/decks/:deckId/edit\"> \n          <EditDeck/>\n         </Route>\n         \n          <Route path = \"/decks/:deckId/cards/:cardId/edit\">\n          <EditCard/>\n          </Route>\n         \n        <Route exact path=\"/decks/:deckId\">\n          <ViewDeck/>\n        </Route>\n       \n        <Route>\n          <NotFound />\n        </Route>\n    \n      </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default Layout;","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout/index\";\n\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n \n    <div className=\"app-routes\">\n      <Switch>\n        <Route>\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n   \n  \n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}